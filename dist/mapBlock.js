import { MapBlockIndex } from "./position.js";
import * as camera from "./camera.js";
import { MapPathHandler } from "./mapPathHandler.js";
import { MapBlockDrawHandler } from "./drawHandler.js";
export class MapBlock {
    constructor(x, y) {
        this._indexPosition = new MapBlockIndex(0, 0);
        this._pathHandler = new MapPathHandler(this);
        this._drawHandler = new MapBlockDrawHandler(this);
        this._indexPosition.set(x, y);
        this._indexPosition.round();
        MapBlock.addBlock(this);
    }
    static blocksUpdate() {
        const updateBlockFunction = (block) => { block.update(); };
        MapBlock.processFunctionToBlocks(updateBlockFunction);
    }
    static clearAllBlock() {
        console.log("移除所有地圖方塊");
        for (var x of MapBlock._mapBlocksHash.keys()) {
            MapBlock._mapBlocksHash.get(x)?.clear();
        }
    }
    static getBlockSize() {
        return 16;
    }
    static getBlockSizeInCamera() {
        return this.getBlockSize() * camera.zoomRate;
    }
    static getBlock(blockIndex) {
        if (MapBlock._mapBlocksHash.has(blockIndex.getX()) &&
            MapBlock._mapBlocksHash.get(blockIndex.getX())?.has(blockIndex.getY())) {
            return MapBlock._mapBlocksHash.get(blockIndex.getX())?.get(blockIndex.getY());
        }
        return null;
    }
    static BlockIndexToPathDistance(startPosition, targetPosition) {
        let targetBlock = this.getBlock(targetPosition);
        let startBlock = this.getBlock(startPosition);
        if (targetBlock != null && startBlock != null) {
            return targetBlock.getDistanceWithBlock(startBlock);
        }
        return null;
    }
    static addBlock(block) {
        let pos = block._indexPosition;
        if (!MapBlock._mapBlocksHash.has(pos.getX())) {
            this._mapBlocksHash.set(pos.getX(), new Map());
        }
        MapBlock._mapBlocksHash.get(pos.getX())?.set(pos.getY(), block);
        this.debugLog("新增地圖方塊:" + block.toString());
    }
    static removeBlock(block) {
        let pos = block._indexPosition;
        let getBlock = this.getBlock(pos);
        if (block != getBlock)
            return;
        MapBlock._mapBlocksHash.get(pos.getX())?.delete(pos.getY());
        this.debugLog("移除地圖方塊：" + block.toString());
    }
    static debugLog(message) {
        if (this.debugMessage) {
            console.log(message);
        }
    }
    static removeBlockWithPosition(blockIndex) {
        let getBlock = this.getBlock(blockIndex);
        if (getBlock == null)
            return;
        MapBlock._mapBlocksHash.get(blockIndex.getX())?.delete(blockIndex.getY());
        this.debugLog("移除地圖方塊：" + getBlock.toString());
    }
    static processFunctionToBlocks(blockProcessFunction) {
        this._mapBlocksHash.forEach((hash, x) => {
            hash.forEach((mapBlock, y) => {
                blockProcessFunction(mapBlock);
            });
        });
    }
    update() {
        this.drawSelf();
        this._pathHandler.update();
    }
    getName() {
        return "<MapBlock>";
    }
    toString() {
        return `${this.getName()}( ${this._indexPosition.getX()},${this._indexPosition.getY()} )`;
    }
    getIndexPosition() {
        return this._indexPosition.copy();
    }
    getWorldPosition() {
        return this._indexPosition.toWorldPosition();
    }
    getDrawPosition() {
        return camera.worldToCameraPosition(this.getWorldPosition());
    }
    getDistanceWithBlock(block) {
        return this._pathHandler.getDistanceWithBlock(block);
    }
    getDistanceWithPosition(blockIndex) {
        let gettedBlock = MapBlock.getBlock(blockIndex);
        if (gettedBlock != null) {
            return this.getDistanceWithBlock(gettedBlock);
        }
        return null;
    }
}
MapBlock.debugMessage = false;
MapBlock._mapBlocksHash = new Map();
export class NormalMapBlock extends MapBlock {
    drawSelf() {
        this._drawHandler.drawRect(null, "#999999", "#888888", 0.55);
    }
    getName() {
        return "<NormalMapBlock>";
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFwQmxvY2suanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvbWFwQmxvY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLGFBQWEsRUFBaUMsTUFBTSxlQUFlLENBQUM7QUFFN0UsT0FBTyxLQUFLLE1BQU0sTUFBTSxhQUFhLENBQUM7QUFFdEMsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQ3JELE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBR3ZELE1BQU0sT0FBZ0IsUUFBUTtJQTZGMUIsWUFBWSxDQUFRLEVBQUUsQ0FBUTtRQUpwQixtQkFBYyxHQUFtQixJQUFJLGFBQWEsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDekQsaUJBQVksR0FBb0IsSUFBSSxjQUFjLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDekQsaUJBQVksR0FBeUIsSUFBSSxtQkFBbUIsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUd6RSxJQUFJLENBQUMsY0FBYyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDOUIsSUFBSSxDQUFDLGNBQWMsQ0FBQyxLQUFLLEVBQUUsQ0FBQztRQUM1QixRQUFRLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQzVCLENBQUM7SUF0Rk0sTUFBTSxDQUFDLFlBQVk7UUFDdEIsTUFBTSxtQkFBbUIsR0FBRyxDQUFDLEtBQWMsRUFBQyxFQUFFLEdBQUUsS0FBSyxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2xFLFFBQVEsQ0FBQyx1QkFBdUIsQ0FBRSxtQkFBbUIsQ0FBRSxDQUFDO0lBQzVELENBQUM7SUFFTSxNQUFNLENBQUMsYUFBYTtRQUN2QixPQUFPLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBQ3hCLEtBQUksSUFBSSxDQUFDLElBQUksUUFBUSxDQUFDLGNBQWMsQ0FBQyxJQUFJLEVBQUUsRUFBQztZQUN4QyxRQUFRLENBQUMsY0FBYyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxLQUFLLEVBQUUsQ0FBQztTQUMzQztJQUNMLENBQUM7SUFFTSxNQUFNLENBQUMsWUFBWTtRQUN0QixPQUFPLEVBQUUsQ0FBQztJQUNkLENBQUM7SUFFTSxNQUFNLENBQUMsb0JBQW9CO1FBQzlCLE9BQU8sSUFBSSxDQUFDLFlBQVksRUFBRSxHQUFHLE1BQU0sQ0FBQyxRQUFRLENBQUM7SUFDakQsQ0FBQztJQUVNLE1BQU0sQ0FBQyxRQUFRLENBQUUsVUFBMEI7UUFDOUMsSUFBSSxRQUFRLENBQUMsY0FBYyxDQUFDLEdBQUcsQ0FBRSxVQUFVLENBQUMsSUFBSSxFQUFFLENBQUU7WUFDcEQsUUFBUSxDQUFDLGNBQWMsQ0FBQyxHQUFHLENBQUUsVUFBVSxDQUFDLElBQUksRUFBRSxDQUFFLEVBQUUsR0FBRyxDQUFFLFVBQVUsQ0FBQyxJQUFJLEVBQUUsQ0FBRSxFQUMxRTtZQUFDLE9BQU8sUUFBUSxDQUFDLGNBQWMsQ0FBQyxHQUFHLENBQUUsVUFBVSxDQUFDLElBQUksRUFBRSxDQUFFLEVBQUUsR0FBRyxDQUFFLFVBQVUsQ0FBQyxJQUFJLEVBQUUsQ0FBYyxDQUFDO1NBQUM7UUFDaEcsT0FBTyxJQUFJLENBQUM7SUFDaEIsQ0FBQztJQUVNLE1BQU0sQ0FBQyx3QkFBd0IsQ0FDbEMsYUFBMkIsRUFBRSxjQUE0QjtRQUNyRCxJQUFJLFdBQVcsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLGNBQWMsQ0FBQyxDQUFDO1FBQ2hELElBQUksVUFBVSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsYUFBYSxDQUFDLENBQUM7UUFDbEQsSUFBRyxXQUFXLElBQUUsSUFBSSxJQUFJLFVBQVUsSUFBRSxJQUFJLEVBQUM7WUFDckMsT0FBTyxXQUFXLENBQUMsb0JBQW9CLENBQUMsVUFBVSxDQUFDLENBQUM7U0FDdkQ7UUFDRCxPQUFPLElBQUksQ0FBQztJQUNoQixDQUFDO0lBR1MsTUFBTSxDQUFDLFFBQVEsQ0FBRSxLQUFjO1FBQ3JDLElBQUksR0FBRyxHQUFHLEtBQUssQ0FBQyxjQUFjLENBQUM7UUFDL0IsSUFBSSxDQUFDLFFBQVEsQ0FBQyxjQUFjLENBQUMsR0FBRyxDQUFFLEdBQUcsQ0FBQyxJQUFJLEVBQUUsQ0FBRSxFQUM5QztZQUFFLElBQUksQ0FBQyxjQUFjLENBQUMsR0FBRyxDQUFFLEdBQUcsQ0FBQyxJQUFJLEVBQUUsRUFBRSxJQUFJLEdBQUcsRUFBb0IsQ0FBRSxDQUFDO1NBQUU7UUFDdkUsUUFBUSxDQUFDLGNBQWMsQ0FBQyxHQUFHLENBQUUsR0FBRyxDQUFDLElBQUksRUFBRSxDQUFFLEVBQUUsR0FBRyxDQUFFLEdBQUcsQ0FBQyxJQUFJLEVBQUUsRUFBRSxLQUFLLENBQUUsQ0FBQztRQUNwRSxJQUFJLENBQUMsUUFBUSxDQUFFLFNBQVMsR0FBRyxLQUFLLENBQUMsUUFBUSxFQUFFLENBQUUsQ0FBQztJQUNsRCxDQUFDO0lBRVMsTUFBTSxDQUFDLFdBQVcsQ0FBRSxLQUFjO1FBQ3hDLElBQUksR0FBRyxHQUFHLEtBQUssQ0FBQyxjQUFjLENBQUM7UUFDL0IsSUFBSSxRQUFRLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBRSxHQUFHLENBQUUsQ0FBQztRQUNwQyxJQUFJLEtBQUssSUFBRSxRQUFRO1lBQUcsT0FBTztRQUM3QixRQUFRLENBQUMsY0FBYyxDQUFDLEdBQUcsQ0FBRSxHQUFHLENBQUMsSUFBSSxFQUFFLENBQUUsRUFBRSxNQUFNLENBQUUsR0FBRyxDQUFDLElBQUksRUFBRSxDQUFFLENBQUM7UUFDaEUsSUFBSSxDQUFDLFFBQVEsQ0FBRSxTQUFTLEdBQUMsS0FBSyxDQUFDLFFBQVEsRUFBRSxDQUFFLENBQUM7SUFDaEQsQ0FBQztJQUVTLE1BQU0sQ0FBQyxRQUFRLENBQUUsT0FBZ0I7UUFDdkMsSUFBSSxJQUFJLENBQUMsWUFBWSxFQUFFO1lBQ25CLE9BQU8sQ0FBQyxHQUFHLENBQUUsT0FBTyxDQUFFLENBQUM7U0FDMUI7SUFDTCxDQUFDO0lBRVMsTUFBTSxDQUFDLHVCQUF1QixDQUFFLFVBQXdCO1FBQzlELElBQUksUUFBUSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUUsVUFBVSxDQUFFLENBQUM7UUFDM0MsSUFBSSxRQUFRLElBQUksSUFBSTtZQUFFLE9BQU87UUFDN0IsUUFBUSxDQUFDLGNBQWMsQ0FBQyxHQUFHLENBQUUsVUFBVSxDQUFDLElBQUksRUFBRSxDQUFFLEVBQUUsTUFBTSxDQUFFLFVBQVUsQ0FBQyxJQUFJLEVBQUUsQ0FBRSxDQUFDO1FBQzlFLElBQUksQ0FBQyxRQUFRLENBQUUsU0FBUyxHQUFDLFFBQVEsQ0FBQyxRQUFRLEVBQUUsQ0FBRSxDQUFDO0lBQ25ELENBQUM7SUFFUyxNQUFNLENBQUMsdUJBQXVCLENBQUUsb0JBQStCO1FBQ3JFLElBQUksQ0FBQyxjQUFjLENBQUMsT0FBTyxDQUFFLENBQUMsSUFBSSxFQUFFLENBQUMsRUFBQyxFQUFFO1lBQ3BDLElBQUksQ0FBQyxPQUFPLENBQUUsQ0FBRSxRQUFRLEVBQUUsQ0FBQyxFQUFFLEVBQUU7Z0JBQzNCLG9CQUFvQixDQUFFLFFBQVEsQ0FBRSxDQUFDO1lBQ3JDLENBQUMsQ0FBRSxDQUFDO1FBQ1IsQ0FBQyxDQUFFLENBQUM7SUFDUixDQUFDO0lBaUJNLE1BQU07UUFDVCxJQUFJLENBQUMsUUFBUSxFQUFFLENBQUM7UUFDaEIsSUFBSSxDQUFDLFlBQVksQ0FBQyxNQUFNLEVBQUUsQ0FBQztJQUMvQixDQUFDO0lBQ00sT0FBTztRQUNWLE9BQU8sWUFBWSxDQUFDO0lBQ3hCLENBQUM7SUFDTSxRQUFRO1FBQ1gsT0FBTyxHQUFHLElBQUksQ0FBQyxPQUFPLEVBQUUsS0FBSyxJQUFJLENBQUMsY0FBYyxDQUFDLElBQUksRUFBRSxJQUFJLElBQUksQ0FBQyxjQUFjLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQztJQUM5RixDQUFDO0lBRU0sZ0JBQWdCO1FBQ25CLE9BQU8sSUFBSSxDQUFDLGNBQWMsQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUN0QyxDQUFDO0lBRU0sZ0JBQWdCO1FBQ25CLE9BQU8sSUFBSSxDQUFDLGNBQWMsQ0FBQyxlQUFlLEVBQUUsQ0FBQztJQUNqRCxDQUFDO0lBRU0sZUFBZTtRQUNsQixPQUFPLE1BQU0sQ0FBQyxxQkFBcUIsQ0FDL0IsSUFBSSxDQUFDLGdCQUFnQixFQUFFLENBQzFCLENBQUM7SUFDTixDQUFDO0lBRU0sb0JBQW9CLENBQUMsS0FBYztRQUN0QyxPQUFPLElBQUksQ0FBQyxZQUFZLENBQUMsb0JBQW9CLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDekQsQ0FBQztJQUVNLHVCQUF1QixDQUFDLFVBQXdCO1FBQ25ELElBQUksV0FBVyxHQUFHLFFBQVEsQ0FBQyxRQUFRLENBQUMsVUFBVSxDQUFDLENBQUM7UUFDaEQsSUFBSSxXQUFXLElBQUUsSUFBSSxFQUFFO1lBQ25CLE9BQU8sSUFBSSxDQUFDLG9CQUFvQixDQUFFLFdBQVcsQ0FBRSxDQUFDO1NBQ25EO1FBQ0QsT0FBTyxJQUFJLENBQUM7SUFDaEIsQ0FBQzs7QUFwSWEscUJBQVksR0FBYSxLQUFLLENBQUM7QUFFNUIsdUJBQWMsR0FDL0IsSUFBSSxHQUFHLEVBQWtDLENBQUM7QUFzSTlDLE1BQU0sT0FBTyxjQUFlLFNBQVEsUUFBUTtJQUNqQyxRQUFRO1FBQ1gsSUFBSSxDQUFDLFlBQVksQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLFNBQVMsRUFBRSxTQUFTLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDakUsQ0FBQztJQUNNLE9BQU87UUFDVixPQUFPLGtCQUFrQixDQUFDO0lBQzlCLENBQUM7Q0FDSiJ9