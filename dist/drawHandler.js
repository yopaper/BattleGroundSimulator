import { zoomRate } from "./camera.js";
import { CameraPosition, WorldPosition } from "./position.js";
import { Context2D } from "./canvas.js";
import { MapBlock } from "./mapBlock.js";
export class DrawHandler {
    static getZoomValue(value) {
        return value * zoomRate;
    }
    static drawLine(targetPosition, startPosition, strokeColor, lineWidth = 1) {
        let startCameraPosition = CameraPosition.fromWorld(startPosition);
        let targetCameraPosition = CameraPosition.fromWorld(targetPosition);
        Context2D.beginPath();
        Context2D.strokeStyle = strokeColor;
        Context2D.lineWidth = this.getZoomValue(lineWidth);
        Context2D.moveTo(startCameraPosition.getX(), startCameraPosition.getY());
        Context2D.lineTo(targetCameraPosition.getX(), targetCameraPosition.getY());
        Context2D.stroke();
        Context2D.closePath();
    }
    static drawRectWithSize(position, rectSize, fillColor = null, strokeColor = null, lineWidth = 1) {
        let drawPosition = CameraPosition.fromWorld(position);
        let zoomSize = { x: this.getZoomValue(rectSize.x), y: this.getZoomValue(rectSize.y) };
        drawPosition.move(-zoomSize.x / 2, -zoomSize.y / 2);
        Context2D.beginPath();
        Context2D.rect(drawPosition.getX(), drawPosition.getY(), zoomSize.x, zoomSize.y);
        this.doFillStroke(fillColor, strokeColor, lineWidth);
        Context2D.closePath();
    }
    static drawRectWithPosition(position1, position2, fillColor = null, strokeColor = null, lineWidth = 1) {
        let drawPosition = new WorldPosition((position1.getX() + position2.getX()) / 2, (position1.getY() + position2.getY()) / 2);
        let drawSize = {
            x: Math.abs(position1.getX() - position2.getX()),
            y: Math.abs(position1.getY() - position2.getY())
        };
        this.drawRectWithSize(drawPosition, drawSize, fillColor, strokeColor, lineWidth);
    }
    static drawCircle(position, circleSize, fillColor = null, strokeColor = null, lineWidth = 1) {
        let drawPosition = CameraPosition.fromWorld(position);
        Context2D.beginPath();
        Context2D.arc(drawPosition.getX(), drawPosition.getY(), this.getZoomValue(circleSize) / 2, 0, 2 * Math.PI);
        this.doFillStroke(fillColor, strokeColor, lineWidth);
        Context2D.closePath();
    }
    static doFillStroke(fillColor, strokeColor, lineWidth) {
        if (fillColor != null) {
            Context2D.fillStyle = fillColor;
            Context2D.fill();
        }
        if (strokeColor != null) {
            Context2D.lineWidth = UnitDrawHandler.getZoomValue(lineWidth);
            Context2D.strokeStyle = strokeColor;
            Context2D.stroke();
        }
    }
    getDrawOffsetPosition(x, y) {
        let pos = this.getOwnerDrawPosition().copy();
        pos.move(DrawHandler.getZoomValue(x), DrawHandler.getZoomValue(y));
        return pos;
    }
    drawRect(size = null, fillColor = null, strokeColor = null, lineWidth = 1, drawOffset = { x: 0, y: 0 }) {
        let drawSize;
        if (size == null) {
            drawSize = { x: this.getDegaultSize(), y: this.getDegaultSize() };
        }
        else
            drawSize = size;
        let drawPosition = this.getOwnerWorldPosition();
        drawPosition.move(drawOffset.x, drawOffset.y);
        DrawHandler.drawRectWithSize(drawPosition, drawSize, fillColor, strokeColor, lineWidth);
    }
    drawCircle(size = null, fillColor = null, strokeColor = null, lineWidth = 1, drawOffset = { x: 0, y: 0 }) {
        let drawSize;
        if (size == null)
            drawSize = this.getDegaultSize();
        else
            drawSize = size;
        let drawPosition = this.getOwnerWorldPosition();
        drawPosition.move(drawOffset.x, drawOffset.y);
        DrawHandler.drawCircle(drawPosition, drawSize, fillColor, strokeColor, lineWidth);
    }
    drawLineFromSelf(targetPosition, strokeColor, lineWidth = 1) {
        DrawHandler.drawLine(targetPosition, this.getOwnerWorldPosition(), strokeColor, lineWidth);
    }
}
export class UnitDrawHandler extends DrawHandler {
    constructor(unitOwner) {
        super();
        this._unitOwner = unitOwner;
    }
    getOwnerDrawPosition() {
        return this._unitOwner.getDrawPosition();
    }
    getOwnerWorldPosition() {
        return this._unitOwner.getPosition();
    }
    getDegaultSize() {
        return this._unitOwner.getUnitSize();
    }
}
export class MapBlockDrawHandler extends DrawHandler {
    constructor(blockOwner) {
        super();
        this._blockOwner = blockOwner;
    }
    getOwnerDrawPosition() {
        return this._blockOwner.getDrawPosition();
    }
    getOwnerWorldPosition() {
        return this._blockOwner.getWorldPosition();
    }
    getDegaultSize() {
        return MapBlock.getBlockSize();
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHJhd0hhbmRsZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvZHJhd0hhbmRsZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFLLGFBQWEsQ0FBQztBQUN0QyxPQUFPLEVBQUUsY0FBYyxFQUFFLGFBQWEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUU5RCxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sYUFBYSxDQUFDO0FBQ3hDLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFekMsTUFBTSxPQUFnQixXQUFXO0lBSXRCLE1BQU0sQ0FBQyxZQUFZLENBQUUsS0FBWTtRQUNwQyxPQUFPLEtBQUssR0FBRyxRQUFRLENBQUM7SUFDNUIsQ0FBQztJQUNNLE1BQU0sQ0FBQyxRQUFRLENBQUUsY0FBNEIsRUFBRSxhQUEyQixFQUM3RSxXQUFrQixFQUFFLFlBQWlCLENBQUM7UUFDdEMsSUFBSSxtQkFBbUIsR0FBb0IsY0FBYyxDQUFDLFNBQVMsQ0FBQyxhQUFhLENBQUMsQ0FBQztRQUNuRixJQUFJLG9CQUFvQixHQUFvQixjQUFjLENBQUMsU0FBUyxDQUFDLGNBQWMsQ0FBQyxDQUFDO1FBQ3JGLFNBQVMsQ0FBQyxTQUFTLEVBQUUsQ0FBQztRQUN0QixTQUFTLENBQUMsV0FBVyxHQUFHLFdBQVcsQ0FBQztRQUNwQyxTQUFTLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUUsU0FBUyxDQUFFLENBQUM7UUFDckQsU0FBUyxDQUFDLE1BQU0sQ0FBRSxtQkFBbUIsQ0FBQyxJQUFJLEVBQUUsRUFBRSxtQkFBbUIsQ0FBQyxJQUFJLEVBQUUsQ0FBRSxDQUFDO1FBQzNFLFNBQVMsQ0FBQyxNQUFNLENBQUUsb0JBQW9CLENBQUMsSUFBSSxFQUFFLEVBQUUsb0JBQW9CLENBQUMsSUFBSSxFQUFFLENBQUUsQ0FBQztRQUM3RSxTQUFTLENBQUMsTUFBTSxFQUFFLENBQUM7UUFD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