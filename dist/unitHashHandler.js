import * as mapBlock from "./mapBlock.js";
import { UnitHashIndex } from "./position.js";
import { DrawHandler } from "./drawHandler.js";
class UnitHashContainer {
    constructor(x, y) {
        this._units = [];
        this._indexPosition = new UnitHashIndex(x, y);
        this._worldPosition = this._indexPosition.toWorldPosition();
    }
    static clearUnitHashMap() {
        this._unitHashMap.forEach((mapInX, x) => {
            mapInX.forEach((container, y) => {
                container.clear();
            });
        });
    }
    static runFunctionToContainers(runFunction) {
        this._unitHashMap.forEach((mapInX, x) => {
            mapInX.forEach(runFunction);
        });
    }
    static getHashContainer(index) {
        if (this._unitHashMap.get(index.getX())?.has(index.getY())) {
            return this._unitHashMap.get(index.getX())?.get(index.getY());
        }
        if (!this._unitHashMap.has(index.getX())) {
            this._unitHashMap.set(index.getX(), new Map());
        }
        let newContainer = new UnitHashContainer(index.getX(), index.getY());
        this._unitHashMap.get(index.getX())?.set(index.getY(), newContainer);
        return newContainer;
    }
    clear() {
        this._units.splice(0, this._units.length);
    }
    debugDraw() {
        DrawHandler.drawRectWithSize(this._worldPosition, { x: UnitHashHandler.getHashBlockSize() - 5,
            y: UnitHashHandler.getHashBlockSize() - 5 }, null, "#FFFF00", 0.15);
        for (var i = 0; i < this._units.length; i++) {
            DrawHandler.drawLine(this._worldPosition, this._units[i].getPosition(), "#00FFFF", 0.15);
        }
    }
    addUnit(unit) {
        if (this._units.includes(unit))
            return;
        this._units.push(unit);
    }
    getUnits() {
        return Array.from(this._units);
    }
}
UnitHashContainer._unitHashMap = new Map();
export class UnitHashHandler {
    constructor(unitOwner) {
        this._unitOwner = unitOwner;
        this._indexPosition = new UnitHashIndex(0, 0);
        UnitHashHandler.addHashHandler(this);
    }
    static locateHash(hashHandler) {
        let gettedContainer = UnitHashContainer.getHashContainer(hashHandler.getIndexPos());
        gettedContainer.addUnit(hashHandler._unitOwner);
    }
    static addHashHandler(hash) {
        if (UnitHashHandler._hashList.includes(hash))
            return;
        UnitHashHandler._hashList.push(hash);
    }
    static removeHashHandler(hash) {
        if (!UnitHashHandler._hashList.includes(hash))
            return;
        let index = UnitHashHandler._hashList.indexOf(hash);
        UnitHashHandler._hashList.splice(index, 1);
    }
    static allUpdate() {
        const runUpdate = () => {
            for (var i = 0; i < UnitHashHandler._hashList.length; i++) {
                UnitHashHandler._hashList[i].update();
            }
        };
        const debugDraw = () => {
            UnitHashContainer.runFunctionToContainers((container) => { container.debugDraw(); });
        };
        UnitHashContainer.clearUnitHashMap();
        runUpdate();
        debugDraw();
    }
    static clearAllHashHandler() {
        console.log("清除所有 UnitHashHandler");
        UnitHashHandler._hashList.splice(0, UnitHashHandler._hashList.length);
        UnitHashContainer.clearUnitHashMap();
    }
    static getHashCount() {
        return UnitHashHandler._hashList.length;
    }
    static getHashBlockSize() {
        return mapBlock.MapBlock.getBlockSize() * 3;
    }
    static getUnitsInRange(index, range = 0) {
        let returnUnits = [];
        for (var dx = index.getX() - range; dx <= index.getX() + range; dx++) {
            for (var dy = index.getY() - range; dy <= index.getY() + range; dy++) {
                let currentIndex = new UnitHashIndex(dx, dy);
                let getUnits = this.getUnitsOnIndex(currentIndex);
                for (var i = 0; i < getUnits.length; i++) {
                    returnUnits.push(getUnits[i]);
                }
            }
        }
        return returnUnits;
    }
    static getUnitsOnIndex(index) {
        return UnitHashContainer.getHashContainer(index).getUnits();
    }
    removeSelf() {
        UnitHashHandler.removeHashHandler(this);
    }
    getIndexPos() {
        return this._indexPosition.copy();
    }
    update() {
        let pos = this._unitOwner.getPosition();
        this._indexPosition.setWithWorldPosition(pos);
        UnitHashHandler.locateHash(this);
    }
}
UnitHashHandler._hashList = [];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidW5pdEhhc2hIYW5kbGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL3VuaXRIYXNoSGFuZGxlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEtBQUssUUFBUSxNQUFNLGVBQWUsQ0FBQztBQUUxQyxPQUFPLEVBQWlCLGFBQWEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUM3RCxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFHL0MsTUFBTSxpQkFBaUI7SUFtQ25CLFlBQVksQ0FBUSxFQUFFLENBQVE7UUFGcEIsV0FBTSxHQUFnQixFQUFFLENBQUM7UUFHL0IsSUFBSSxDQUFDLGNBQWMsR0FBRyxJQUFJLGFBQWEsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDOUMsSUFBSSxDQUFDLGNBQWMsR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLGVBQWUsRUFBRSxDQUFDO0lBQ2hFLENBQUM7SUFsQ00sTUFBTSxDQUFDLGdCQUFnQjtRQUMxQixJQUFJLENBQUMsWUFBWSxDQUFDLE9BQU8sQ0FBRSxDQUFFLE1BQU0sRUFBRSxDQUFRLEVBQUUsRUFBRTtZQUM3QyxNQUFNLENBQUMsT0FBTyxDQUFFLENBQUMsU0FBMkIsRUFBRSxDQUFRLEVBQUMsRUFBRTtnQkFDckQsU0FBUyxDQUFDLEtBQUssRUFBRSxDQUFDO1lBQ3RCLENBQUMsQ0FBRSxDQUFDO1FBQ1IsQ0FBQyxDQUFFLENBQUM7SUFDUixDQUFDO0lBQ00sTUFBTSxDQUFDLHVCQUF1QixDQUFFLFdBQStDO1FBQ2xGLElBQUksQ0FBQyxZQUFZLENBQUMsT0FBTyxDQUFFLENBQUUsTUFBTSxFQUFFLENBQVEsRUFBRSxFQUFFO1lBQzdDLE1BQU0sQ0FBQyxPQUFPLENBQUUsV0FBVyxDQUFFLENBQUM7UUFDbEMsQ0FBQyxDQUFFLENBQUM7SUFDUixDQUFDO0lBQ00sTUFBTSxDQUFDLGdCQUFnQixDQUFFLEtBQXFCO1FBQ2pELElBQUksSUFBSSxD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