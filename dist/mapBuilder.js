import * as mapBlock from "./mapBlock.js";
import * as spawnerBuilding from "./spawnerBuilding.js";
import { getDistance } from "./basic.js";
import { GameEvent } from "./gameEvent.js";
import { Team } from "./teamClass.js";
import { MapBlockIndex } from "./position.js";
import { randomRange } from "./basic.js";
console.log("Map Builder Module Loading...");
export class MapBuilder {
    constructor(mapSize) {
        this._mapSize = mapSize;
        this._integerMapSize = Math.ceil(this._mapSize);
    }
    static buildLine(position1, position2, width = 1) {
        const buildVertical = () => {
            if (position1.getY() == position2.getY())
                return;
            let deltaX = (position2.getX() - position1.getX()) / Math.abs(position2.getY() - position1.getY());
            let deltaY = Math.abs(position2.getY() - position1.getY()) / (position2.getY() - position1.getY());
            let itemX = position1.getX();
            for (var y = position1.getY(); y != position2.getY(); y += deltaY) {
                for (var dx = -width; dx <= width; dx++) {
                    new mapBlock.NormalMapBlock(itemX + dx, y);
                }
                itemX += deltaX;
            }
        };
        const buildHorizontal = () => {
            if (position1.getX() == position2.getX())
                return;
            let deltaX = Math.abs(position2.getX() - position1.getX()) / (position2.getX() - position1.getX());
            let deltaY = (position2.getY() - position1.getY()) / Math.abs(position2.getX() - position1.getX());
            let itemY = position1.getY();
            for (var x = position1.getX(); x != position2.getX(); x += deltaX) {
                for (var dy = -width; dy <= width; dy++) {
                    new mapBlock.NormalMapBlock(x, itemY + dy);
                }
                itemY += deltaY;
            }
        };
        buildVertical();
        buildHorizontal();
    }
    buildNewMap() {
        console.log("---=== < 建立新地圖 > ===---");
        GameEvent.triggerMapReset();
    }
    runFunctionOnEveryPosition(processFunction) {
        for (var x = -this._integerMapSize; x <= this._integerMapSize; x++) {
            for (var y = -this._integerMapSize; y <= this._integerMapSize; y++) {
                if (!this.positionInMapRange(x, y))
                    continue;
                processFunction(this, x, y);
            }
        }
    }
    positionInMapRange(x, y) {
        return (getDistance(x, y, 0, 0) <= this._mapSize + Math.log2(this._mapSize));
    }
}
export class SeedRandomBuilder extends MapBuilder {
    constructor(mapSize, mapSeed, iterationTimes = 4) {
        super(mapSize);
        this._mapSeed = mapSeed;
        this._seedArg = SeedRandomBuilder.seedRandomFunction(this._mapSeed, 4);
        this._iterationTimes = iterationTimes;
    }
    static buildRandomMap(mapSize, seed, iterationTimes) {
        new SeedRandomBuilder(mapSize, seed, iterationTimes).buildNewMap();
    }
    static seedRandomFunction(seed, alpha = 2, iteration = 1) {
        alpha = Math.pow(10, alpha);
        for (var i = 0; i <= iteration; i++) {
            seed = Math.floor(Math.pow(seed + alpha, 2) / alpha) % alpha;
        }
        return seed;
    }
    buildNewMap() {
        super.buildNewMap();
        this.processBuildMap();
        this.processCreateItem();
    }
    processBuildMap() {
        let linkPosList = [];
        const positionProcessFunction = (builder, x, y) => {
            let seedBuilder = builder;
            if (seedBuilder.checkPositionCanBuildBlock(seedBuilder, x, y)) {
                linkPosList.push({ x: x, y: y });
            }
        };
        const buildOneTime = () => {
            linkPosList.splice(0, linkPosList.length);
            this.runFunctionOnEveryPosition(positionProcessFunction);
            for (var i = 0; i < linkPosList.length; i++) {
                new mapBlock.NormalMapBlock(linkPosList[i].x, linkPosList[i].y);
            }
        };
        for (var i = 1; i <= this._iterationTimes; i++) {
            buildOneTime();
        }
    }
    processCreateItem() {
        let teamCounter = 0;
        const positionCreateItemFunction = (builder, x, y) => {
            if (mapBlock.MapBlock.getBlock(new MapBlockIndex(x, y)) == null)
                return;
            let posSeed = SeedRandomBuilder.seedRandomFunction(builder.getPositionSeed(x, y), 4, 2);
            if (posSeed % 67 != 23)
                return;
            createItemWithSeed(posSeed, x, y);
        };
        const createItemWithSeed = (seed, x, y) => {
            let itemTeam = Team.getTeam(teamCounter);
            let worldPos = new MapBlockIndex(x, y).toWorldPosition();
            teamCounter = (teamCounter + 1) % 3;
            seed = seed % 10;
            if (0 <= seed && seed <= 9) {
                new spawnerBuilding.SmallAttackerSpawner(worldPos.getX(), worldPos.getY(), itemTeam);
            }
        };
        this.runFunctionOnEveryPosition(positionCreateItemFunction);
    }
    getPositionSeed(x, y) {
        x += this._integerMapSize;
        y += this._integerMapSize;
        let posNumber = this._integerMapSize * y + x;
        let posArg = SeedRandomBuilder.seedRandomFunction(posNumber, 4, 3);
        return SeedRandomBuilder.seedRandomFunction(posArg + this._seedArg, 4, 3);
    }
    checkPositionCanBuildBlock(builder, x, y) {
        let mapIndex = new MapBlockIndex(x, y);
        if (mapBlock.MapBlock.getBlock(mapIndex) != null)
            return false;
        let checkPos = mapIndex.getAroundPosition4();
        let linkSeedTable = [1234, 5000, 7000, 9000, 10000];
        let aroundBlockCount = 0;
        let posSeed = builder.getPositionSeed(x, y);
        for (var i = 0; i < checkPos.length; i++) {
            if (mapBlock.MapBlock.getBlock(checkPos[i]) == null)
                continue;
            aroundBlockCount += 1;
        }
        return (posSeed <= linkSeedTable[aroundBlockCount]);
    }
}
export class CircleMapBuilder extends MapBuilder {
    constructor(mapSize, circleNumber, degreeOffset = null) {
        super(mapSize);
        this._circleNumber = circleNumber;
        this._circleDistance = this._mapSize / this._circleNumber;
        if (degreeOffset == null) {
            this._degreeOffset = randomRange(0, Math.PI * 2);
        }
        else {
            this._degreeOffset = degreeOffset;
        }
    }
    buildNewMap() {
        super.buildNewMap();
        this.processBuildMapBlock();
        this.processCreateItem();
    }
    buildCircle(size) {
        const cirleFunction = (builder, x, y) => {
            let distance = getDistance(x, y, 0, 0);
            if (Math.abs(distance - size) <= 1.1) {
                new mapBlock.NormalMapBlock(x, y);
            }
        };
        this.runFunctionOnEveryPosition(cirleFunction);
    }
    processBuildMapBlock() {
        for (var i = 1; i <= this._circleNumber; i++) {
            this.buildCircle(i * this._circleDistance);
        }
        for (var i = 0; i < 3; i++) {
            let degree = i * 2 * Math.PI / 3 + this._degreeOffset;
            console.log(degree);
            let targetPosition = new MapBlockIndex(this._mapSize * Math.cos(degree), this._mapSize * Math.sin(degree));
            console.log(targetPosition.toString());
            MapBuilder.buildLine(targetPosition, new MapBlockIndex(0, 0));
        }
    }
    processCreateItem() {
        for (var i = 1; i <= this._circleNumber; i++) {
            this.createItemsOnCircle(i * this._circleDistance);
        }
    }
    createItemsOnCircle(size) {
        let itemNumber = Math.ceil(size / 7.25);
        let degreeSeg = 2 * Math.PI / (3 * (2 * itemNumber + 5));
        for (let i = 0; i < 3; i++) {
            let centerDegree = i * 2 * Math.PI / 3 + this._degreeOffset;
            console.log(centerDegree);
            for (let j = -itemNumber; j <= itemNumber; j++) {
                let itemDegree = centerDegree + j * degreeSeg;
                let indexPosition = new MapBlockIndex(size * Math.cos(itemDegree), size * Math.sin(itemDegree));
                let itemPosition = indexPosition.toWorldPosition();
                new spawnerBuilding.SmallAttackerSpawner(itemPosition.getX(), itemPosition.getY(), Team.getTeam(i));
            }
        }
    }
}
//# sourceMappingURL=data:application/json;base64,