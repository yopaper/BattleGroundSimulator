import { getDistance, randomRange } from "./basic.js";
import { UnitHashHandler } from "./unitHashHandler.js";
import { MapBlock } from "./mapBlock.js";
import { worldToCameraPosition } from "./camera.js";
class Position {
    constructor(x, y) {
        this._x = 0;
        this._y = 0;
        this.setX(x);
        this.setY(y);
    }
    round() {
        this._x = Math.round(this._x);
        this._y = Math.round(this._y);
    }
    getX() {
        return this._x;
    }
    getY() {
        return this._y;
    }
    toString() {
        return "(" + this._x + "," + this._y + ")";
    }
    getDict() {
        return { x: this._x, y: this._y };
    }
    setX(x) {
        this._x = x;
    }
    setY(y) {
        this._y = y;
    }
    moveX(deltaX) {
        this.setX(this._x + deltaX);
    }
    moveY(deltaY) {
        this.setY(this._y + deltaY);
    }
    getEuclideanDistance(position) {
        return Position.EuclideanDistanceWithTwoPosition(this, position);
    }
    set(x, y) {
        this.setX(x);
        this.setY(y);
    }
    move(x, y) {
        this.set(this._x + x, this._y + y);
    }
    static EuclideanDistanceWithTwoPosition(pos1, pos2) {
        return getDistance(pos1._x, pos1._y, pos2._x, pos2._y);
    }
    static scalePosition(position, scaleRate) {
        return {
            x: position.getX() / scaleRate,
            y: position.getY() / scaleRate
        };
    }
}
class IndexPosition extends Position {
    setX(x) {
        this._x = Math.round(x);
    }
    setY(y) {
        this._y = Math.round(y);
    }
    equal(position) {
        return (this._x == position._x && this._y == position._y);
    }
}
export class WorldPosition extends Position {
    copy() {
        return new WorldPosition(this._x, this._y);
    }
}
export class CameraPosition extends Position {
    static fromWorld(position) {
        return worldToCameraPosition(position);
    }
    copy() {
        return new CameraPosition(this._x, this._y);
    }
}
export class UnitHashIndex extends IndexPosition {
    static fromWorldPosition(position) {
        let scalePos = this.worldScale(position);
        return new UnitHashIndex(scalePos.x, scalePos.y);
    }
    static worldScale(position) {
        return this.scalePosition(position, UnitHashHandler.getHashBlockSize());
    }
    copy() {
        return new UnitHashIndex(this._x, this._y);
    }
    toWorldPosition() {
        return new WorldPosition(this._x * UnitHashHandler.getHashBlockSize(), this._y * UnitHashHandler.getHashBlockSize());
    }
    getAroundPosition4() {
        return [
            new UnitHashIndex(this._x + 1, this._y),
            new UnitHashIndex(this._x - 1, this._y),
            new UnitHashIndex(this._x, this._y + 1),
            new UnitHashIndex(this._x, this._y - 1)
        ];
    }
    setWithWorldPosition(position) {
        let scalePos = UnitHashIndex.worldScale(position);
        this.set(scalePos.x, scalePos.y);
    }
}
export class MapBlockIndex extends IndexPosition {
    static fromWorldPosition(position) {
        let scalePos = this.worldScale(position);
        return new MapBlockIndex(scalePos.x, scalePos.y);
    }
    static worldScale(position) {
        return this.scalePosition(position, MapBlock.getBlockSize());
    }
    copy() {
        return new MapBlockIndex(this._x, this._y);
    }
    toWorldPosition() {
        return new WorldPosition(this._x * MapBlock.getBlockSize(), this._y * MapBlock.getBlockSize());
    }
    getRandomWorldPositionOnIt() {
        let position = this.toWorldPosition();
        let halfBlockSize = MapBlock.getBlockSize() / 2.15;
        position.move(randomRange(-halfBlockSize, halfBlockSize), randomRange(-halfBlockSize, halfBlockSize));
        return position;
    }
    getAroundPosition4() {
        return [
            new MapBlockIndex(this._x + 1, this._y),
            new MapBlockIndex(this._x - 1, this._y),
            new MapBlockIndex(this._x, this._y + 1),
            new MapBlockIndex(this._x, this._y - 1)
        ];
    }
    setWithWorldPosition(position) {
        let scalePos = MapBlockIndex.worldScale(position);
        this.set(scalePos.x, scalePos.y);
    }
    getPathDistance(position) {
        return MapBlock.BlockIndexToPathDistance(this, position);
    }
    pathDistanceInRange(position, range) {
        if (this.getPathDistance(position) == null)
            return false;
        let distance = this.getPathDistance(position);
        return (distance <= range);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG9zaXRpb24uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvcG9zaXRpb24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFdBQVcsRUFBRSxXQUFXLEVBQUUsTUFBTSxZQUFZLENBQUM7QUFDdEQsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBQ3ZELE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDekMsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0sYUFBYSxDQUFDO0FBRXBELE1BQWUsUUFBUTtJQUluQixZQUFhLENBQVEsRUFBRSxDQUFRO1FBSHJCLE9BQUUsR0FBVSxDQUFDLENBQUM7UUFDZCxPQUFFLEdBQVUsQ0FBQyxDQUFDO1FBR3BCLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDYixJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ2pCLENBQUM7SUFDTSxLQUFLO1FBQ1IsSUFBSSxDQUFDLEVBQUUsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFFLElBQUksQ0FBQyxFQUFFLENBQUUsQ0FBQztRQUNoQyxJQUFJLENBQUMsRUFBRSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUUsSUFBSSxDQUFDLEVBQUUsQ0FBRSxDQUFDO0lBQ3BDLENBQUM7SUFHTSxJQUFJO1FBQ1AsT0FBTyxJQUFJLENBQUMsRUFBRSxDQUFDO0lBQ25CLENBQUM7SUFDTSxJQUFJO1FBQ1AsT0FBTyxJQUFJLENBQUMsRUFBRSxDQUFDO0lBQ25CLENBQUM7SUFDTSxRQUFRO1FBQ1gsT0FBTyxHQUFHLEdBQUcsSUFBSSxDQUFDLEVBQUUsR0FBRyxHQUFHLEdBQUcsSUFBSSxDQUFDLEVBQUUsR0FBRyxHQUFHLENBQUM7SUFDL0MsQ0FBQztJQUNNLE9BQU87UUFDVixPQUFPLEVBQUMsQ0FBQyxFQUFDLElBQUksQ0FBQyxFQUFFLEVBQUUsQ0FBQyxFQUFDLElB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